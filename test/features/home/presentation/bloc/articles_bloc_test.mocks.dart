// Mocks generated by Mockito 5.4.4 from annotations
// in ekd_test/test/features/home/presentation/bloc/articles_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ekd_test/core/error/failure.dart' as _i6;
import 'package:ekd_test/core/usecases/usecase.dart' as _i8;
import 'package:ekd_test/features/home/domain/entities/article.dart' as _i7;
import 'package:ekd_test/features/home/domain/repositories/article_repository.dart'
    as _i2;
import 'package:ekd_test/features/home/domain/usecases/get_articles_usecase.dart'
    as _i3;
import 'package:fpdart/src/either.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeArticleRepository_0 extends _i1.SmartFake
    implements _i2.ArticleRepository {
  _FakeArticleRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetArticlesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetArticlesUsecase extends _i1.Mock
    implements _i3.GetArticlesUsecase {
  MockGetArticlesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ArticleRepository get articleRepository => (super.noSuchMethod(
        Invocation.getter(#articleRepository),
        returnValue: _FakeArticleRepository_0(
          this,
          Invocation.getter(#articleRepository),
        ),
      ) as _i2.ArticleRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.Article>>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i5.Either<_i6.Failure, List<_i7.Article>>>.value(
                _i9.dummyValue<_i5.Either<_i6.Failure, List<_i7.Article>>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i5.Either<_i6.Failure, List<_i7.Article>>>);
}
